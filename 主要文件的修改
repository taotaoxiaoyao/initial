一.添加或修改build目录下的js文件
1.添加getPath.js文件，用于处理一批文件名
举例说明：
如入参为./src/module/**/index.js（module根目录下有index.js文件和hello/index.js）
则输出为{ 'hello/index': './src/module/hello/index.js',index: './src/module/index.js' }
var glob= require('glob'),
    path= require('path');

module.exports = (entries)=> {
  var result = {}, translate = entries;
  //处理地址中的/**为(/*.*)，用于定义匹配规则，使用()是因为需要通过RegExp.$n获取匹配位置处的信息
  translate = translate.replace('/**', '(/*.*)');
  glob.sync(entries).forEach(function(entry, index){
    //basename为文件名
    var basename = path.basename(entry, path.extname(entry)),
        reg = new RegExp(translate,'g'),
        key;
    reg.test(entry);
    //key值为被匹配到的路径
    key = RegExp.$1;
    if(key){
      result[key.replace('/', '') + '/' + basename] = entry;
    }else {
      result['index'] = entry;
    }
  });

  return result;
};
2.添加getEntries.js文件
此文件通过调用getPath.js文件，生成webpack中的entry对象
const getPath = require('./getPath');
let entries = getPath('./src/module/**/index.js');
entries.vendor = ['vue', 'vue-router', 'axios', 'vuex'];
module.exports = entries;
3.添加getHtmlConfigs.js文件
此文件通过调用getPath.js文件生成路径键值对对象，然后针对对象中的包含index的key，生成html文件以及json文件
let getPath = require('./getPath');
let fs = require('fs');
let configs = [];

module.exports = function (pages, baseUrl) {
  let result = getPath(pages);
  for(let pathname in result) {
    let config = null;             //每个页面的配置信息
    let metaConfigs = baseUrl + pathname + '.json';      //自定义信息的配置，如title、favicon等
    if(pathname.indexOf('index') > -1) {
      config = {
        filename: pathname + '.html',
        template: 'index.html',
        inject: true,
        //仅在文件修改后才会发布文件，默认值
        cache: true,
        minify: {
          collapseWhitespace: false,
          removeComments: true,
          removeAttributeQuotes: true
        },
        chunks: ['manifest', 'vendor', pathname],
        showErrors: true,
        excludeChunks: [],
        chunksSortMode: 'auto',
        favicon: '',
        //此属性是额外添加用于配置诸如不同title，不同favicon等信息的
        metas: {
          title: 'default',
          favicon: ''
        }
      };
      let metas = JSON.parse(fs.readFileSync(metaConfigs, 'utf8'));
      Object.assign(config.metas, metas);
      configs.push(config);
      //以下异步操作得不到想要的结果
      //由于node目前推荐readFile文件之前不检测文件是否存在，而是直接readFile，然后出错时直接抛出异常
      // fs.readFile(metaConfigs, {
      //   encoding: 'utf8'
      // }, (err, data) => {
      //   if (err) throw err;
      //   config.metas = Object.assign({}, config.metas, JSON.parse(data));
      // });
      // if(config){
      //   configs.push(config);
      // }
    }
  }
  return configs;
}
4.添加utils.js
此文件用于获取css相关配置
var path = require('path'),
  config = require('../config'),
  ExtractTextPlugin = require('extract-text-webpack-plugin')

exports.assetsPath = function (_path) {
  var assetsSubDirectory = process.env.NODE_ENV === 'production'
    ? config.build.assetsSubDirectory
    : config.dev.assetsSubDirectory
  return path.posix.join(assetsSubDirectory, _path)
}

exports.cssLoaders = function(options) {
  options = options || {};
  //获取样式、预处理器等的loader项
  function generateLoaders(loaders) {
    let sourceLoader = loaders.map(function(loader) {
      let extraParamChar;
      if (/\?/.test(loader)) {
        loader = loader.replace(/\?/, '-loader?');
        extraParamChar = '&';
      } else {
        loader = loader + '-loader';
        extraParamChar = '?';
      }
      return loader + (options.sourceMap ? extraParamChar + 'sourceMap' : '');
    }).join('!');

    // 抽取出css
    if (options.extract) {
      return ExtractTextPlugin.extract({
        fallback: 'vue-style-loader',
        use: sourceLoader
      });
    } else {
      return ['vue-style-loader', sourceLoader].join('!');
    }
  }

  return {
    css: generateLoaders(['css']),
    postcss: generateLoaders(['css']),
    less: generateLoaders(['css', 'less']),
    sass: generateLoaders(['css', 'sass?indentedSyntax']),
    scss: generateLoaders(['css', 'sass']),
    stylus: generateLoaders(['css', 'stylus']),
    styl: generateLoaders(['css', 'stylus'])
  };
};

//配置loaders处的值
exports.styleLoaders = function(options) {
  let output = [];
  let loaders = exports.cssLoaders(options);
  for (let extension in loaders) {
    let loader = loaders[extension];
    output.push({
      test: new RegExp('\\.' + extension + '$'),
      loader: loader
    });
  }
  return output;
};
5.修改build.js
require('./check-versions')();
require('shelljs/global');
var ora = require('ora'),
  path = require('path'),
  webpack = require('webpack'),
  config = require('../config'),
  webpackConfig = require('./webpack.prod.conf'),
  spinner = ora('building for production...'),
  assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory);

env.NODE_ENV = 'production';

spinner.start()
rm('-rf', assetsPath);
mkdir('-p', assetsPath);
cp('-R', 'static/*', assetsPath);

webpack(webpackConfig, function (err, stats) {
  spinner.stop()
  if (err) throw err
  process.stdout.write(stats.toString({
      colors: true,
      modules: false,
      children: false,
      chunks: false,
      chunkModules: false
    }) + '\n')

  console.log(
    '  Tip: built files are meant to be served over an HTTP server.\n' +
    '  Opening welcome.html over file:// won\'t work.\n')
})
6.check-versions.js
var chalk = require('chalk')
var semver = require('semver')
var packageConfig = require('../package.json')
var shell = require('shelljs')
function exec (cmd) {
  return require('child_process').execSync(cmd).toString().trim()
}

var versionRequirements = [
  {
    name: 'node',
    currentVersion: semver.clean(process.version),
    versionRequirement: packageConfig.engines.node
  },
]

if (shell.which('npm')) {
  versionRequirements.push({
    name: 'npm',
    currentVersion: exec('npm --version'),
    versionRequirement: packageConfig.engines.npm
  })
}

module.exports = function () {
  var warnings = []
  for (var i = 0; i < versionRequirements.length; i++) {
    var mod = versionRequirements[i]
    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) {
      warnings.push(mod.name + ': ' +
        chalk.red(mod.currentVersion) + ' should be ' +
        chalk.green(mod.versionRequirement)
      )
    }
  }

  if (warnings.length) {
    console.log('')
    console.log(chalk.yellow('To use this template, you must update following to modules:'))
    console.log()
    for (var i = 0; i < warnings.length; i++) {
      var warning = warnings[i]
      console.log('  ' + warning)
    }
    console.log()
    process.exit(1)
  }
}
7.dev-server.js
/* eslint-disable */
require('eventsource-polyfill')
var hotClient = require('webpack-hot-middleware/client?noInfo=true&reload=true')

hotClient.subscribe(function (event) {
  if (event.action === 'reload') {
    window.location.reload()
  }
})
8.修改dev-server.js
//检查版本的js模块
require('./check-versions')();
//配置文件信息模块
var config = require('../config'),
  //可以使用指定浏览器或应用打开指定的url
  opn = require('opn'),
  //路径操作
  path = require('path'),
  //引入express框架，快速搭建一个node服务
  express = require('express'),
  //引入webpack模块
  webpack = require('webpack'),
  //代理服务器
  proxyMiddleware = require('http-proxy-middleware'),
  webpackConfig,
  DashboardPlugin = require('webpack-dashboard/plugin');
//判断开发环境
if (!process.env.NODE_ENV) {
  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)
}
webpackConfig = require('./webpack.dev.conf')
// 设置服务器端口号
var port = process.env.PORT || config.dev.port
// 定义http代理
var proxyTable = config.dev.proxyTable
//启动一个express服务
var app = express()
//加载webpack配置
var compiler = webpack(webpackConfig)
compiler.apply(new DashboardPlugin());
//webpack的开发中间件，专门为webpack提供的一个简单的中间件，可以让文件都加载内存中，不去读写硬盘，并且当文件被改动的时候，不会刷新页面就会部署成功
var devMiddleware = require('webpack-dev-middleware')(compiler, {
  //存取前端bundle的地址
  publicPath: webpackConfig.output.publicPath,
//使用以下隐藏代码则编译时会给出打包详情
  // stats: {
  //   colors: true,
  //   chunks: true
  // },
  // quiet: true
  quiet: false
})
//使webpack-hot-middleware具备热部署中间件
var hotMiddleware = require('webpack-hot-middleware')(compiler)
//当html被改变的时候，让html被强制部署
compiler.plugin('compilation', function (compilation) {
  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {
    hotMiddleware.publish({ action: 'reload' })
    cb()
  })
})

// 遍历代理的配置信息，并且使用中间件加载进去
Object.keys(proxyTable).forEach(function (context) {
  var options = proxyTable[context]
  if (typeof options === 'string') {
    options = { target: options }
  }
  app.use(proxyMiddleware(options.filter || context, options))
})

// 当访问找不到页面的时候，该中间件指定了一个默认的页面返回
app.use(require('connect-history-api-fallback')())

// 使用中间件
app.use(devMiddleware)

// 热部署
app.use(hotMiddleware)

// 根据配置信息拼接一个目录路径，然后将该路径下的文件交给express的静态目录管理
var staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)
app.use(staticPath, express.static('./static'))
// var uri = 'http://localhost:' + port + '/select/index.html'
var uri = 'http://localhost:' + port

console.log('> Starting dev server...')
//导出的对象
module.exports = app.listen(port, function(err){
  if(err){
    console.log(err);
    return;
  }
  //非测试环境下打开'http://localhost:' + port
  if(process.env.NODE_ENV !== 'testing') {
    opn(uri);
  }
})
9.修改webpack.prod.conf.js
var utils = require('./utils'),
  webpack = require('webpack'),
  config = require('../config'),
  merge = require('webpack-merge'),
  baseWebpackConfig = require('./webpack.base.conf'),
  HtmlWebpackPlugin = require('html-webpack-plugin'),
  ExtractTextPlugin = require('extract-text-webpack-plugin'),
  env = config.build.env,
  // path = require('path'),
  // CopyWebpackPlugin = require('copy-webpack-plugin'),
  // OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin'),

  getHtmlConfigs = require('./getHtmlConfigs'),
  htmlConfigs= getHtmlConfigs('./src/module/**/index.js', './src/module/'),
  webpackConfig = merge(baseWebpackConfig, {
    module: {
      loaders: utils.styleLoaders({
        sourceMap: config.build.productionSourceMap,
        extract: true
      })
    },
    devtool: config.build.productionSourceMap ? '#source-map' : false,
    output: {
      path: config.build.assetsRoot,
      filename: utils.assetsPath('js/[name].[chunkhash].js'),
      chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')
    },
    plugins: [
      // http://vuejs.github.io/vue-loader/en/workflow/production.html
      new webpack.DefinePlugin({
        'process.env': env
      }),
      //此处使用DllReferencePlugin结合webpack.dll.conf.js生成的js和json使用，作用：打包第三方库
      // new webpack.DllReferencePlugin({
      //   context: __dirname,
      //   manifest: require('./manifest.json')
      // }),
      new webpack.optimize.UglifyJsPlugin({
        compress: {
          warnings: false
        }
      }),
      // extract css into its own file
      new ExtractTextPlugin({
        filename: utils.assetsPath('css/[name].[contenthash].css')
      }),

      // extract webpack runtime and module manifest to its own file in order to
      // prevent vendor hash from being updated whenever app bundle is updated
      //manifest用于解决缓存问题
      new webpack.optimize.CommonsChunkPlugin({
        name: 'manifest',
        chunks: ['vendor']
      })
    ]
  });

if (config.build.productionGzip) {
  var CompressionWebpackPlugin = require('compression-webpack-plugin')

  webpackConfig.plugins.push(
    new CompressionWebpackPlugin({
      asset: '[path].gz[query]',
      algorithm: 'gzip',
      test: new RegExp(
        '\\.(' +
        config.build.productionGzipExtensions.join('|') +
        ')$'
      ),
      threshold: 10240,
      minRatio: 0.8
    })
  )
}


module.exports = webpackConfig;

htmlConfigs.forEach(function(config){
  module.exports.plugins.push(new HtmlWebpackPlugin(config));
})

10.添加exports.js
使用./webpack.dll.conf进行构建的配置文件
// https://github.com/shelljs/shelljs
require('./check-versions')();
require('shelljs/global');
process.env.NODE_ENV = 'production';
const path = require('path');
const config = require('../config');
const ora = require('ora');
const webpack = require('webpack');
const webpackConfig = require('./webpack.dll.conf');

console.log(
  '  Tip:\n' +
  '  Built files are meant to be served over an HTTP server.\n' +
  '  Opening index.html over file:// won\'t work.\n'
);

let spinner = ora('building for production...');
spinner.start();

let assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory);
rm('-rf', assetsPath);
mkdir('-p', assetsPath);
cp('-R', '../static', assetsPath);

webpack(webpackConfig, function(err, stats) {
  spinner.stop();
  if (err) throw err;
  process.stdout.write(stats.toString({
      colors: true,
      modules: false,
      children: false,
      chunks: false,
      chunkModules: false
    }) + '\n');
});

二.html模板文件
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title><%= htmlWebpackPlugin.options.metas.title%></title>
  </head>
  <body>
    <div id="app"></div>
  </body>
</html>
